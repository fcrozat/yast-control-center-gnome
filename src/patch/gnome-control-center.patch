--- ./../cut-n-paste/shell/control-center.c	2013-02-16 15:00:07.010264000 -0600
+++ ./../control-center.c	2013-02-16 16:01:26.034401456 -0600
@@ -28,7 +28,9 @@
 
 #include <gtk/gtk.h>
 #include <string.h>
+#if 0
 #include <libnotify/notify.h>
+#endif
 
 #ifdef GDK_WINDOWING_X11
 #include <X11/Xlib.h>
@@ -46,8 +48,10 @@
   exit (0);
 }
 
+#if 0
 static char **start_panels = NULL;
 static gboolean show_overview = FALSE;
+#endif
 static gboolean verbose = FALSE;
 static gboolean show_help = FALSE;
 static gboolean show_help_gtk = FALSE;
@@ -56,11 +60,15 @@
 const GOptionEntry all_options[] = {
   { "version", 0, G_OPTION_FLAG_NO_ARG, G_OPTION_ARG_CALLBACK, option_version_cb, NULL, NULL },
   { "verbose", 'v', 0, G_OPTION_ARG_NONE, &verbose, N_("Enable verbose mode"), NULL },
+#if 0
   { "overview", 'o', 0, G_OPTION_ARG_NONE, &show_overview, N_("Show the overview"), NULL },
+#endif
   { "help", 'h', G_OPTION_FLAG_HIDDEN, G_OPTION_ARG_NONE, &show_help, N_("Show help options"), NULL },
   { "help-all", 0, G_OPTION_FLAG_HIDDEN, G_OPTION_ARG_NONE, &show_help_all, N_("Show help options"), NULL },
   { "help-gtk", 0, G_OPTION_FLAG_HIDDEN, G_OPTION_ARG_NONE, &show_help_gtk, N_("Show help options"), NULL },
+#if 0
   { G_OPTION_REMAINING, '\0', 0, G_OPTION_ARG_FILENAME_ARRAY, &start_panels, N_("Panel to display"), NULL },
+#endif
   { NULL, 0, 0, 0, NULL, NULL, NULL } /* end the list */
 };
 
@@ -76,13 +84,17 @@
   GError *error = NULL;
 
   verbose = FALSE;
+#if 0
   show_overview = FALSE;
+#endif
   show_help = FALSE;
+#if 0
   start_panels = NULL;
+#endif
 
   argv = g_application_command_line_get_arguments (command_line, &argc);
 
-  context = g_option_context_new (N_("- System Settings"));
+  context = g_option_context_new (N_("- Administrator Settings"));
   g_option_context_add_main_entries (context, all_options, GETTEXT_PACKAGE);
   g_option_context_set_translation_domain(context, GETTEXT_PACKAGE);
   g_option_context_add_group (context, gtk_get_option_group (TRUE));
@@ -120,6 +132,7 @@
 
   gnome_control_center_show (shell, GTK_APPLICATION (application));
 
+#if 0
   if (show_overview)
     {
       gnome_control_center_set_overview_page (shell);
@@ -148,17 +161,20 @@
             }
         }
     }
+#endif
 
   gnome_control_center_present (shell);
   gdk_notify_startup_complete ();
 
   g_strfreev (argv);
+#if 0
   if (start_panels != NULL)
     {
       g_strfreev (start_panels);
       start_panels = NULL;
     }
   show_overview = FALSE;
+#endif
 
   return retval;
 }
@@ -231,6 +247,8 @@
   GtkApplication *application;
   int status;
 
+  bindtextdomain (YAST_CC_PACKAGE, YASTLOCALEDIR);
+  bind_textdomain_codeset (YAST_CC_PACKAGE, "UTF-8");
   bindtextdomain (GETTEXT_PACKAGE, GNOMELOCALEDIR);
   bind_textdomain_codeset (GETTEXT_PACKAGE, "UTF-8");
   textdomain (GETTEXT_PACKAGE);
@@ -242,15 +260,21 @@
   gtk_init (&argc, &argv);
   cc_shell_log_init ();
 
+  GtkIconTheme * theme;
+  theme = gtk_icon_theme_get_default();
+  gtk_icon_theme_prepend_search_path (theme, "/usr/share/YaST2/theme/current");
+
   /* register a symbolic icon size for use in sidebar lists */
   gtk_icon_size_register ("cc-sidebar-list", 24, 24);
 
+#if 0
   notify_init ("gnome-control-center");
+#endif
 
   shell = gnome_control_center_new ();
 
   /* enforce single instance of this application */
-  application = gtk_application_new ("org.gnome.ControlCenter", G_APPLICATION_HANDLES_COMMAND_LINE);
+  application = gtk_application_new ("org.opensuse.yast-control-center-gnome", G_APPLICATION_HANDLES_COMMAND_LINE);
   g_signal_connect (application, "startup",
                     G_CALLBACK (application_startup_cb), shell);
   g_signal_connect (application, "command-line",
--- ./../cut-n-paste/shell/gnome-control-center.c	2013-02-16 15:00:07.010264000 -0600
+++ ./../gnome-control-center.c	2013-02-16 17:15:37.509567703 -0600
@@ -28,7 +28,7 @@
 #include <gtk/gtk.h>
 #include <gdk/gdkkeysyms.h>
 #include <string.h>
-#ifdef HAVE_CHEESE
+#if 0 /* ifdef HAVE_CHEESE*/
 #include <clutter-gtk/clutter-gtk.h>
 #endif /* HAVE_CHEESE */
 #define GMENU_I_KNOW_THIS_IS_UNSTABLE
@@ -51,6 +51,7 @@
  * Both sizes are defined in https://live.gnome.org/Design/SystemSettings/ */
 #define FIXED_WIDTH 740
 #define FIXED_HEIGHT 636
+#define YAST_FIXED_HEIGHT (FIXED_HEIGHT - 67)
 #define SMALL_SCREEN_FIXED_HEIGHT 400
 
 #define MIN_ICON_VIEW_HEIGHT 300
@@ -145,13 +146,16 @@
   g_warning ("Couldn't find GtkNotebook page to remove %p", page);
 }
 
+#if 0
 static void
 notebook_add_page (GtkWidget *notebook,
 		   GtkWidget *page)
 {
   gtk_notebook_append_page (GTK_NOTEBOOK (notebook), page, NULL);
 }
+#endif
 
+#if 0
 static const gchar *
 get_icon_name_from_g_icon (GIcon *gicon)
 {
@@ -173,6 +177,7 @@
 
   return NULL;
 }
+#endif
 
 static gboolean
 activate_panel (GnomeControlCenter *shell,
@@ -182,6 +187,33 @@
                 const gchar        *name,
                 GIcon              *gicon)
 {
+  GDesktopAppInfo     *appinfo;
+  GdkAppLaunchContext *context;
+  GdkScreen           *screen;
+  GdkDisplay          *display;
+  GError              *error;
+
+  appinfo = g_desktop_app_info_new_from_filename (desktop_file);
+
+  screen = gtk_widget_get_screen (shell->priv->window);
+  display = gdk_screen_get_display (screen);
+  context = gdk_display_get_app_launch_context (display);
+  gdk_app_launch_context_set_screen (context, screen);
+  gdk_app_launch_context_set_timestamp (context, gtk_get_current_event_time ());
+
+  error = NULL;
+  g_app_info_launch_uris (G_APP_INFO (appinfo), NULL,
+                          (GAppLaunchContext *) context,
+                          &error);
+
+  if (error) {
+    g_printerr ("Could not launch '%s': %s\n", id, error->message);
+    g_clear_error (&error);
+  }
+
+  g_object_unref (context);
+  g_object_unref (appinfo);
+#if 0
   GnomeControlCenterPrivate *priv = shell->priv;
   GType panel_type = G_TYPE_INVALID;
   GList *panels, *l;
@@ -246,7 +278,7 @@
   gtk_window_set_icon_name (GTK_WINDOW (priv->window), icon_name);
 
   priv->current_panel_box = box;
-
+#endif
   return TRUE;
 }
 
@@ -854,7 +886,7 @@
 
   priv->store = (GtkListStore *) cc_shell_model_new ();
   priv->category_views = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, NULL);
-  priv->menu_tree = gmenu_tree_new_for_path (MENUDIR "/gnomecc.menu", 0);
+  priv->menu_tree = gmenu_tree_new ("YaST-gnome.menu", 0);
 
   reload_menu (shell);
 
@@ -864,6 +896,7 @@
 static void
 load_panel_plugins (GnomeControlCenter *shell)
 {
+#if 0
   GList *modules;
 
   /* only allow this function to be run once to prevent modules being loaded
@@ -882,6 +915,7 @@
   modules = g_io_modules_load_all_in_directory (PANELS_DIR);
   g_list_free (modules);
 
+#endif
 }
 
 
@@ -897,7 +931,9 @@
 			 GParamSpec               *spec,
                          GnomeControlCenterPrivate *priv)
 {
+#if 0
   int nat_height;
+#endif
   GtkWidget *child;
 
   child = notebook_get_selected_page (GTK_WIDGET (notebook));
@@ -909,16 +945,20 @@
       gtk_widget_hide (W (priv->builder, "home-button"));
       gtk_widget_show (W (priv->builder, "search-entry"));
       gtk_widget_hide (W (priv->builder, "lock-button"));
-
+      gtk_scrolled_window_set_min_content_height (GTK_SCROLLED_WINDOW (priv->scrolled_window), priv->small_screen == SMALL_SCREEN_TRUE ? SMALL_SCREEN_FIXED_HEIGHT : YAST_FIXED_HEIGHT);
+#if 0
       gtk_widget_get_preferred_height_for_width (GTK_WIDGET (priv->main_vbox),
                                                  FIXED_WIDTH, NULL, &nat_height);
       gtk_scrolled_window_set_min_content_height (GTK_SCROLLED_WINDOW (priv->scrolled_window),
                                                   priv->small_screen == SMALL_SCREEN_TRUE ? SMALL_SCREEN_FIXED_HEIGHT : nat_height);
+#endif
     }
   else
     {
       gtk_widget_show (W (priv->builder, "home-button"));
       gtk_widget_hide (W (priv->builder, "search-entry"));
+      gtk_scrolled_window_set_min_content_height (GTK_SCROLLED_WINDOW (priv->scrolled_window), MIN_ICON_VIEW_HEIGHT);
+#if 0
       /* set the scrolled window small so that it doesn't force
          the window to be larger than this panel */
       gtk_widget_get_preferred_height_for_width (GTK_WIDGET (priv->window),
@@ -927,6 +967,7 @@
       gtk_window_resize (GTK_WINDOW (priv->window),
                          FIXED_WIDTH,
                          nat_height);
+#endif
     }
 }
 
@@ -1282,8 +1323,9 @@
     {
       if (self->priv->small_screen != small)
         gtk_window_unmaximize (GTK_WINDOW (self->priv->window));
-
+#if 0
       gtk_window_set_resizable (GTK_WINDOW (self->priv->window), FALSE);
+#endif
     }
 
   self->priv->small_screen = small;
@@ -1336,7 +1378,7 @@
 
   priv = self->priv = CONTROL_CENTER_PRIVATE (self);
 
-#ifdef HAVE_CHEESE
+#if 0 /* ifdef HAVE_CHEESE */
   if (gtk_clutter_init (NULL, NULL) != CLUTTER_INIT_SUCCESS)
     {
       g_critical ("Clutter-GTK init failed");
@@ -1373,8 +1415,10 @@
 
   /* Main scrolled window */
   priv->scrolled_window = W (priv->builder, "scrolledwindow1");
-
+  gtk_widget_set_size_request (priv->scrolled_window, FIXED_WIDTH, priv->small_screen == SMALL_SCREEN_TRUE ? SMALL_SCREEN_FIXED_HEIGHT : YAST_FIXED_HEIGHT);
+#if 0
   gtk_widget_set_size_request (priv->scrolled_window, FIXED_WIDTH, -1);
+#endif
   priv->main_vbox = W (priv->builder, "main-vbox");
   g_signal_connect (priv->notebook, "notify::page",
                     G_CALLBACK (notebook_page_notify_cb), priv);
--- ./../cut-n-paste/shell/shell.ui	2013-02-16 15:58:26.637394756 -0600
+++ ./../shell.ui	2013-02-16 15:59:45.233397691 -0600
@@ -3,9 +3,9 @@
   <requires lib="gtk+" version="3.0"/>
   <!-- interface-naming-policy project-wide -->
   <object class="GtkApplicationWindow" id="main-window">
-    <property name="title" translatable="yes">System Settings</property>
-    <property name="resizable">False</property>
-    <property name="icon_name">preferences-desktop</property>
+    <property name="title" translatable="yes">Administrator Settings</property>
+    <property name="resizable">True</property>
+    <property name="icon_name">yast</property>
     <property name="window_position">center</property>
     <child>
       <object class="GtkVBox" id="vbox1">
